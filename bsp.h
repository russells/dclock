/*****************************************************************************
* Product: DPP example
* Last Updated for Version: 4.0.00
* Date of the Last Update:  Apr 07, 2008
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) 2002-2008 Quantum Leaps, LLC. All rights reserved.
*
* This software may be distributed and modified under the terms of the GNU
* General Public License version 2 (GPL) as published by the Free Software
* Foundation and appearing in the file GPL.TXT included in the packaging of
* this file. Please note that GPL Section 2[b] requires that all works based
* on this software must also be made publicly available under the terms of
* the GPL ("Copyleft").
*
* Alternatively, this software may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GPL and are specifically designed for licensees interested in
* retaining the proprietary status of their code.
*
* Contact information:
* Quantum Leaps Web site:  http://www.quantum-leaps.com
* e-mail:                  info@quantum-leaps.com
*****************************************************************************/
#ifndef bsp_h_INCLUDED
#define bsp_h_INCLUDED

#include "dclock.h"

/* Must match the ticks per second generated by the AVR code. */
#define BSP_TICKS_PER_SECOND 32

void BSP_startmain();		/* Code to put right at the start of main() */

void BSP_init(void);

#define BSP_logmsg(f,...)
#define BSP_print_event(me,name,e)

void BSP_available(void);
void BSP_not_available(void);
void BSP_play_doorbell(struct DClock *me);
void BSP_doorbell_finished(struct DClock *me);
void BSP_play_buzz(struct DClock *me);
void BSP_buzz_finished(struct DClock *me);
void BSP_start_timer(struct DClock *me);
void BSP_add_to_timer(struct DClock *me);
void BSP_terminated(struct DClock *me);

void BSP_pressedDown    (struct DClock *me, int repeatCount);
void BSP_repeatedDown   (struct DClock *me, int repeatCount);
void BSP_releasedDown   (struct DClock *me);

void BSP_pressedUp      (struct DClock *me, int repeatCount);
void BSP_repeatedUp     (struct DClock *me, int repeatCount);
void BSP_releasedUp     (struct DClock *me);

void BSP_pressedSelect  (struct DClock *me, int repeatCount);
void BSP_repeatedSelect (struct DClock *me, int repeatCount);
void BSP_releasedSelect (struct DClock *me);

void BSP_pressedEscape  (struct DClock *me, int repeatCount);
void BSP_repeatedEscape (struct DClock *me, int repeatCount);
void BSP_releasedEscape (struct DClock *me);

uint8_t BSP_getButton(void);

void BSP_watchdog(struct DClock *me);

#endif	/* bsp_h_INCLUDED */
